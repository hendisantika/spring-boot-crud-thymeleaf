# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Deploy to Linode Server

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  IMAGE_TAG: ${{ github.run_number }}

jobs:
  docker-build:
    runs-on: ubuntu-latest
    steps:
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'corretto'

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log into the Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Scrape build info
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          #          context: .
          file: Dockerfile
          push: true
          labels: ${{ steps.meta.outputs.labels }}
          tags: hendisantika/thymeleaf:${{ github.run_number }}
          build-args: |
            GIT_VERSION_TAG=${{ env.RELEASE_VERSION }}
            GIT_COMMIT_MESSAGE=${{ github.event.head_commit.message }}
            GIT_VERSION_HASH=${{ github.sha }}

  deploy:
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    needs:
      - docker-build
    steps:
      - uses: actions/checkout@v4
      - name: Add Server key
        run: |
          touch key.txt && echo "${{ secrets.SERVER_KEY }}" > key.txt
          chmod 600 key.txt

      - name: Set all environment variables
        env:
          APP_SERVER_PORT: ${{ vars.APP_SERVER_PORT }}
          SERVER_HOST: ${{ vars.SERVER_HOST }}
          SERVER_PORT: ${{ vars.SERVER_PORT }}
          SERVER_USERNAME: ${{ vars.SERVER_USERNAME }}
          IMAGE_TAG: ${{ github.run_number }}
          CONTAINER_NAME: thymeleaf
        run: |
          echo APP_SERVER_PORT=$APP_SERVER_PORT >> .env
          echo CONTAINER_NAME=$CONTAINER_NAME >> .env
          echo IMAGE_TAG=$IMAGE_TAG >> .env

      - name: Copy all environment variables
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ vars.SERVER_HOST }}
          username: ${{ vars.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_KEY }}
          port: ${{ vars.SERVER_PORT }}
          source: "./.env"  # Path to the file on your runner
          target: "~/thymeleaf"  # Target directory on the server

      - name: Deploy the application
        env:
          APP_SERVER_PORT: ${{ vars.APP_SERVER_PORT }}
          SERVER_HOST: ${{ vars.SERVER_HOST }}
          SERVER_PORT: ${{ vars.SERVER_PORT }}
          SERVER_USERNAME: ${{ vars.SERVER_USERNAME }}
        run: |
          set -e
          ./deploy.sh
